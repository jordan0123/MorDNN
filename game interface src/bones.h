#pragma once

#include <cstdint>
#include "SDK.h"
#include "process.h"

enum BONE_IDS : int32_t
{
    Global = 0,
    Position,
    Hips,
    LowerBack,
    LowerBackAdjust,
    LowerBackBelly,
    Spine,
    SpineAdjust,
    Spine1,
    Spine1Adjust,
    RightOuterBreast,
    RightInnerBreast,
    LeftOuterBreast,
    LeftInnerBreast,
    LeftShoulder,
    LeftArm,
    LeftForearm,
    LeftHand,
    LeftHandFinger05_01,
    LeftHandFinger05_02,
    LeftHandFinger05_03,
    LeftHandFinger01_01,
    LeftHandFinger01_02,
    LeftHandFinger01_03,
    LeftHandFinger02_01,
    LeftHandFinger02_02,
    LeftHandFinger02_03,
    LeftHandFinger03_01,
    LeftHandFinger03_02,
    LeftHandFinger03_03,
    LeftHandFinger04_01,
    LeftHandFinger04_02,
    LeftHandFinger04_03,
    LeftWeapon,
    LeftForearmAdjust,
    LeftForeArmTwist,
    LeftForearmTwistAdjust,
    LeftArmAdjust,
    LeftShoulderAdjust,
    LeftTrapezius,
    RightShoulder,
    RightArm,
    RightForearm,
    RightHand,
    RightHandFinger05_01,
    RightHandFinger05_02,
    RightHandFinger05_03,
    RightHandFinger01_01,
    RightHandFinger01_02,
    RightHandFinger01_03,
    RightHandFinger02_01,
    RightHandFinger02_02,
    RightHandFinger02_03,
    RightHandFinger03_01,
    RightHandFinger03_02,
    RightHandFinger03_03,
    RightHandFinger04_01,
    RightHandFinger04_02,
    RightHandFinger04_03,
    RightWeapon,
    RightForearmAdjust,
    RightForeArmTwist,
    RightForearmTwistAdjust,
    RightArmAdjust,
    RightShoulderAdjust,
    RightTrapezius,
    Neck,
    NeckAdjust,
    head,
    HeadAdjust,
    Mandible,
    LeftLips,
    LeftLipsAdjust,
    RightLips,
    RightLipsAdjust,
    MandibleAdjust,
    Tongue01,
    Tongue02,
    LeftLowMaxilar,
    LeftLowMaxilarAdjust,
    RightLowMaxilar,
    RightLowMaxilarAdjust,
    LipsInferior,
    LipsInferiorAdjust,
    LeftLipsInferior,
    LeftLipsInferiorAdjust,
    RightLipsInferior,
    RightLipsInferiorAdjust,
    LeftCheek,
    LeftCheekAdjust,
    LipsSuperior,
    LipsSuperiorAdjust,
    LeftLipsSuperiorMiddle,
    LeftLipsSuperiorMiddleAdjust,
    RightLipsSuperiorMiddle,
    RightLipsSuperiorMiddleAdjust,
    UpperLips,
    UpperLipsAdjust,
    NoseBase,
    NoseBaseAdjust,
    NoseMiddle,
    NoseMiddleAdjust,
    NoseTop,
    NoseTopAdjust,
    RightCheek,
    RightCheekAdjust,
    LeftLowCheek,
    LeftLowCheekAdjust,
    RightLowCheek,
    RightLowCheekAdjust,
    LeftEyebrowLow,
    LeftEyebrowLowAdjust,
    RightEyebrowLow,
    RightEyebrowLowAdjust,
    LeftEyebrowMiddle,
    LeftEyebrowMiddleAdjust,
    RightEyebrowMiddle,
    RightEyebrowMiddleAdjust,
    LeftEyebrowUp,
    LeftEyebrowUpAdjust,
    RightEyebrowUp,
    RightEyebrowUpAdjust,
    LeftEar,
    LeftEarAdjust,
    RightEar,
    RightEarAdjust,
    LeftEye,
    LeftEyeGlobe,
    LeftEyeAdjust,
    LeftUpperLid,
    LeftUpperLidAdjust,
    LeftLowerLid,
    LeftLowerLidAdjust,
    RightEye,
    RightEyeGlobe,
    RightEyeAdjust,
    RightUpperLid,
    RightUpperLidAdjust,
    RightLowerLid,
    RightLowerLidAdjust,
    LeftNose,
    LeftNoseAdjust,
    RightNose,
    RightNoseAdjust,
    LeftUpLeg,
    LeftLeg,
    LeftFoot,
    LeftToeBase,
    LeftLegAdjust,
    LeftUpLegAdjust,
    LeftGluteus,
    RightUpLeg,
    RightLeg,
    RightFoot,
    RightToeBase,
    RightLegAdjust,
    RightUpLegAdjust,
    RightGluteus,
    Global_RightHand,
    RightUpLeg_RightLeg,
    LeftUpLeg_LeftLeg,
    Global_LeftHand,
    Hips_LeftFoot,
    Hips_RightFoot,
    Position_LeftFoot,
    Position_RightFoot,
    Spine1_Spine1,
    LowerBack_Spine,
    LowerBack_Spine1
};

SDK::FVector GetBonePos(SDK::USkeletalMeshComponent* mesh, int32_t bone_id)
{
    SDK::FMatrix m;
    static auto address = FindPattern(GameImageBase, GameModuleInfo.SizeOfImage, "\x48\x8B\xC4\x48\x89\x58\x10\x55\x56\x57\x41\x56\x41\x57\x48\x81\xEC\x00\x00\x00\x00", "xxxxxxxxxxxxxxxxx????");
    reinterpret_cast<SDK::FMatrix* (__fastcall*)(SDK::USkeletalMeshComponent*, SDK::FMatrix*, int32_t)>(address)(mesh, &m, bone_id);
    return m.WPlane;
}